// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"
	bid_entity "fullcycle-auction_go/internal/entity/bid_entity"

	internal_error "fullcycle-auction_go/internal/internal_error"

	mock "github.com/stretchr/testify/mock"
)

// BidEntityRepository is an autogenerated mock type for the BidEntityRepository type
type BidEntityRepository struct {
	mock.Mock
}

// CreateBid provides a mock function with given fields: ctx, bidEntities
func (_m *BidEntityRepository) CreateBid(ctx context.Context, bidEntities []bid_entity.Bid) *internal_error.InternalError {
	ret := _m.Called(ctx, bidEntities)

	if len(ret) == 0 {
		panic("no return value specified for CreateBid")
	}

	var r0 *internal_error.InternalError
	if rf, ok := ret.Get(0).(func(context.Context, []bid_entity.Bid) *internal_error.InternalError); ok {
		r0 = rf(ctx, bidEntities)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal_error.InternalError)
		}
	}

	return r0
}

// FindBidByAuctionId provides a mock function with given fields: ctx, auctionId
func (_m *BidEntityRepository) FindBidByAuctionId(ctx context.Context, auctionId string) ([]bid_entity.Bid, *internal_error.InternalError) {
	ret := _m.Called(ctx, auctionId)

	if len(ret) == 0 {
		panic("no return value specified for FindBidByAuctionId")
	}

	var r0 []bid_entity.Bid
	var r1 *internal_error.InternalError
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]bid_entity.Bid, *internal_error.InternalError)); ok {
		return rf(ctx, auctionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []bid_entity.Bid); ok {
		r0 = rf(ctx, auctionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bid_entity.Bid)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *internal_error.InternalError); ok {
		r1 = rf(ctx, auctionId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*internal_error.InternalError)
		}
	}

	return r0, r1
}

// FindWinningBidByAuctionId provides a mock function with given fields: ctx, auctionId
func (_m *BidEntityRepository) FindWinningBidByAuctionId(ctx context.Context, auctionId string) (*bid_entity.Bid, *internal_error.InternalError) {
	ret := _m.Called(ctx, auctionId)

	if len(ret) == 0 {
		panic("no return value specified for FindWinningBidByAuctionId")
	}

	var r0 *bid_entity.Bid
	var r1 *internal_error.InternalError
	if rf, ok := ret.Get(0).(func(context.Context, string) (*bid_entity.Bid, *internal_error.InternalError)); ok {
		return rf(ctx, auctionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *bid_entity.Bid); ok {
		r0 = rf(ctx, auctionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bid_entity.Bid)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *internal_error.InternalError); ok {
		r1 = rf(ctx, auctionId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*internal_error.InternalError)
		}
	}

	return r0, r1
}

// NewBidEntityRepository creates a new instance of BidEntityRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBidEntityRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BidEntityRepository {
	mock := &BidEntityRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
